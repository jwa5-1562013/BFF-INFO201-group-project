install.packages("jsonlite")
install.packages("httr")
install.package("jsonlite")
install.packages("jsonlite")
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
library("httr")
library("jsonlite")
library("httr")
library("jsonlite")
base.url <- "http://pokeapi.co/api/v2/pokemon/1"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
result <- results$name
# What is pikachu's ID number?
base.url <- "http://pokeapi.co/api/v2/pokemon/pikachu"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
pikachu <- results
# What is pikachu's ID number?
base.url <- "http://pokeapi.co/api/v2/pokemon/pikachu"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
pikachu <- results$id
# What is the size of the "cheri" berry?
base.url <-"http://pokeapi.co/api/v2/berry/cheri"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
cheri <- results$size
# How many pokemon are in the cave habitat?
base.url <-"http://pokeapi.co/api/v2/pokemon-habitat"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
cave <- results$pokemon_species
nrow(cave)
# How many pokemon are in the cave habitat?
base.url <-"http://pokeapi.co/api/v2/pokemon-habitat"
response <- GET(base.url)
body <- content(response, "text")
results <- fromJSON(body)
cave <- results$pokemon_species
numofcave <- nrow(cave)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
library("data.table")
install.packages("data.table")
install.packages("R.utils")
install.packages(ggplot2)
install.packages("ggplot2")
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
library("data.table")
library(R.utils)
library(dplyr)
library(ggplot2)
### This is the stump script to read the data and plot the maps
### You have to write the code suggested here.
### Feel free to follow the ideas in a different manner/in a different file.
### However, you have to submit your main code file.
###
### The file must be executable on the server!
### I.e. someone else must be able to just run it with 'Rscript maps.R'
### /on server/ and get the correct output.
library("data.table")
library(R.utils)
library(dplyr)
library(ggplot2)
?bunzip2
bunzip2("///temp_prec_small.csv.bz2", "./dataset.csv", remove = FALSE, skip = TRUE)
bunzip2("///opt/data/temp_prec_small.csv.bz2", "./dataset.csv", remove = FALSE, skip = TRUE)
install.packages("shiny")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='xiaocl',
token='87B05BE581362BCF0C16CE0122E28F38',
secret='<SECRET>')
rsconnect::setAccountInfo(name='xiaocl',
token='87B05BE581362BCF0C16CE0122E28F38',
secret='lUSy2boMi7MF4N7Laj7+kMkt06a6hUcqlaem8887')
rsconnect::setAccountInfo(name='xiaocl',
token='87B05BE581362BCF0C16CE0122E28F38',
secret='lUSy2boMi7MF4N7Laj7+kMkt06a6hUcqlaem8887')
datasetC <- read.csv("majorC.csv", header=TRUE,stringsAsFactors=FALSE)
setwd("~/Desktop/study/info201/BFF-INFO201-group-project")
datasetC <- read.csv("majorC.csv", header=TRUE,stringsAsFactors=FALSE)
majordata <- read.csv("csv_pus/majors-list.csv",header=TRUE,stringsAsFactors=FALSE)
datasetC <- merge(datasetC, majordata,by = "FOD1P")
write.csv(datasetC, "datasetC.csv", row.names=FALSE)
resultC <- datasetC %>%
select(FOD1P, Major, Major_Category, SEX, AGEP, SCH, SCHL, ESR, PERNP,WKHP)
library("dplyr")
resultC <- datasetC %>%
select(FOD1P, Major, Major_Category, SEX, AGEP, SCH, SCHL, ESR, PERNP,WKHP)
View(resultC)
#write resultB which is datasetB with columns needed for analysis
write.csv(resultC, "resultC.csv", row.names = FALSE)
library("data.table")
library("dplyr")
setwd("~/Desktop/study/info201/BFF-INFO201-group-project")
library("data.table")
library("dplyr")
majorD <- fread("csv_pus/ss16pusd.csv")
datasetD <- majorD %>%
filter(!is.na(FOD1P))
#write csv datasetC with no-NA majors
write.csv(datasetC, "majorC.csv", row.names=FALSE)
#write csv datasetC with no-NA majors
write.csv(datasetD, "majorD.csv", row.names=FALSE)
#reopen r and only runs dplyr package
datasetD <- read.csv("majorD.csv", header=TRUE,stringsAsFactors=FALSE)
majordata <- read.csv("csv_pus/majors-list.csv",header=TRUE,stringsAsFactors=FALSE)
#merge data with majorlist
datasetD <- merge(datasetD, majordata,by = "FOD1P")
#reopen r and only runs dplyr package
datasetD <- read.csv("majorD.csv", header=TRUE,stringsAsFactors=FALSE)
majordata <- read.csv("csv_pus/majors-list.csv",header=TRUE,stringsAsFactors=FALSE)
#merge data with majorlist
datasetD <- merge(datasetD, majordata,by = "FOD1P")
#merged data with major
write.csv(datasetD, "datasetD.csv", row.names=FALSE)
resultD <- datasetD %>%
select(FOD1P, Major, Major_Category, SEX, AGEP, SCH, SCHL, ESR, PERNP,WKHP)
#write resultB which is datasetB with columns needed for analysis
write.csv(resultD, "resultD.csv", row.names = FALSE)
setwd("~/Desktop/study/info201/BFF-INFO201-group-project/datasetA")
resultA <- fread("resultA.csv")
resultA$EMPLOYED <- if(resultA$ESR == 1 | resultA$ESR == 2) {1} else {0}
View(resultA)
resultA$EMPLOYED <- if(resultA$ESR == 1 | resultA$ESR == 2) {resultA$EMPLOYED == 1} else {resultA$EMPLOYED == 0}
View(resultA)
resultA$EMPLOYED <- if(resultA$ESR == 1 | resultA$ESR == 2) {resultA$EMPLOYED == "1"} else {resultA$EMPLOYED == "0"}
resultA$EMPLOYED <- if(resultA$ESR == 1:2) {resultA$EMPLOYED == "1"} else {resultA$EMPLOYED == "0"}
resultA$EMPLOYED <- NULL
View(resultA)
View(resultA)
View(majordata)
